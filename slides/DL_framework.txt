
# ------------------------------------------------------------------ #
                ##### Deep Learning Framework #####
# ------------------------------------------------------------------ #

## Dataset and Data Loader ##
# tf.keras.datasets ==> available keras datasets


## Model creation ##
# tf.keras.layers ::: classes of basic building blocks, e.g. fully-connected layer

# tf.keras.Model  ::: groups multiple layers
    1. Instantiate keras Input tensor :::  x = tf.keras.Input(shape, dtype, ...)
    2. Instantiate and chain keras layers ::: layer1 = tf.keras.layers.LAYER_NAME(...)(x) ...
                                              ....
                                              out = ....

# tf.keras.Sequential ::: stacks multiple layers, 2 modalities
    1. model = tf.keras.Sequential([layer1, layer2, ..., layerN])
    2. model = tf.keras.Sequential() model.add(layer1)
       model.add(layer2) .... model.add(layerN)


## Model training and validation ##
# tf.keras.optimizers, tf.keras.losses ::: prepare model for training
# model.fit ::: train the model


## Model test ##
#  model.evaluate ::: compute loss and metrics in test mode
                      return test loss or list of scalars (for multiple outputs and metrics)
#  model.metrics
#  model.predict ::: compute model output
                     return predictions as tensors


## Save and Restore models ##
# callbacks.ModelCheckpoint ::: save model during learning
    # 1. True: save only model weights
               # model.save_weights
               # model.load_weights ::: restore model
    # 2. False: save the entire model
               # model.save
               # model = tf.keras.models.load_model ::: restore model



## Visualize Learning
# callbacks.Tensorboard ::: Tensorflowâ€™s visualization toolkit

# How to visualize Tensorboard
# 1. tensorboard --logdir EXPERIMENTS_DIR --port PORT    <- from terminal
# 2. localhost:PORT   <- in your browser