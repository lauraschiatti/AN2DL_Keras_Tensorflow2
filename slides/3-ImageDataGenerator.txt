
# ------------------------------------------------------------------ #
                ##### ImageDataGenerator #####
# ------------------------------------------------------------------ #

## Augment image data
the ImageDataGenerator ...
- Receives a batch of images used for training.
- Applies a series of random transformations to each image in the batch (random rotation, resizing, shearing, etc.)
- Replaces the original batch with the new.
- Training the CNN on this randomly transformed batch (i.e., the original data itself is not used for training).



# Steps
# -----

1. Organize dataset folders:

    - data/
        - training/
            - class_1/
                - img1, img2, ..., imgN
            -...
            - class_K/
                - img1, img2, ... , imgN

        - validation/
            - class_1/
                - img1, img2, ..., imgN
            -...
            - class_K/
                - img1, img2, ..., imgN

        - test/
            - class_1/
                - img1, img2, ..., imgN
            - ...
            - class_K/
                - img1, img2, ..., imgN

**** Important ***** : Frequently, the test directory which doesn’t have subdirectories
                       as you don’t know the classes of those images.


2. Initialize ImageDataGenerator object:
    img_gen = ImageDataGenerator(...)


3. Use flow_from_directory to load batches of images from a labeled directory structure

    flow_img_gen = flow_from_directory(
        directory,
        target_size=(256, 256),
        color_mode='rgb',
        classes=None,
        class_mode='categorical',
        batch_size=32,
        shuffle=True,
        seed=None,
        save_to_dir=None,
        save_prefix='',
        save_format='png',
        follow_links=False,
        subset=None,
        interpolation='nearest')

    flow_img_gen.class_indices # check the class labels


4.  a. Create a tf.data.Dataset object
        dataset = tf.data.Dataset.from_generator(flow_img_gen)

    b. Use generator directly
        tf.keras.Model.fit_generator( generator,
               steps_per_epoch=None,
               epochs=1,
               verbose=1,
               callbacks=None,
               validation_data=None,
               validation_steps=None,
               validation_freq=1,
               class_weight=None,
               max_queue_size=10,
               workers=1,
               use_multiprocessing=False,
               shuffle=True,
               initial_epoch=0)
